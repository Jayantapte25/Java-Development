iDesign

1)

=> Staff.java

public class Staff {
	//write your code here

	private String staffName, designation;
	
	public Staff(String staffName, String designation) {
		this.staffName = staffName;
		this.designation = designation;
	}

	public String getStaffName() {
		return this.staffName;
	}

	public String getDesignation() {
		return this.designation;
	}
}



=> Department.java

public class Department {
	//write your code here

	private String departmentName;

	private Staff staff;
	
	public void display() {
		//write your code here
		System.out.println(this.staff.getStaffName()  +" is working in the " + this.getDepartmentName() + "  department as " + this.staff.getDesignation() );
	}

	public Department(String departmentName, Staff staff) {
		this.departmentName = departmentName;
		this.staff = staff;
	}

	public String getDepartmentName() {
		return this.departmentName;
	}
}

=> Main.java

import java.util.*;

public class Main {
	public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
		//write your code here

		String staffName, designation, departmentName;

		System.out.println("Enter the name of the staff:");
		staffName = sc.nextLine();

		System.out.println("Enter the staff designation:");
		designation = sc.nextLine();

		System.out.println("Enter the department name:");
		departmentName = sc.nextLine();

		Staff staff = new Staff(staffName, designation);

		Department department = new Department(departmentName, staff);

		department.display();

	}
}






2) 

=> Account.java

public class Account {
	//fill your code here

	protected String accName, accNo, bankName;


	public Account(String accName, String accNo, String bankName) {
			this.accName = accName;
			this.accNo = accNo;
			this.bankName = bankName;
	}

	public String getAccName() {
		return accName;
	}


	public String getAccNo() {
		return accNo;
	}


	public String getBankName() {
		return bankName;
	}

	public void display() {
		System.out.println("Account Name:" + getAccName());
		System.out.println("Account Number:" + getAccNo());
		System.out.println("Bank Name:" + getBankName());
	}

}




=> SavingsAccount.java

public class SavingsAccount extends Account{
	//fill your code here

	private String orgName;

	public SavingsAccount(String accName,String accNo,String bankName,String orgName) {
		super(accName, accNo, bankName);
		this.orgName= orgName;	
	}

	public String getOrgName() {
		return this.orgName;
	}

	public void display() {
		super.display();
		System.out.println("Organisation Name:" + this.getOrgName());
	}
}




=> CurrentAccount.java

public class CurrentAccount  extends Account {
	//fill your code here

	private String tinNumber;

	public CurrentAccount(String accName,String accNo,String bankName,String tinNumber) {
		super(accName, accNo, bankName);
		this.tinNumber= tinNumber;	
	}

	public String getTinNumber() {
		return this.tinNumber;
	}

	public void display() {
		super.display();
		System.out.println("TIN Number:" + this.getTinNumber());
	}
}



=> Main.java

import java.util.*;

public class Main {
	public static void main(String[] args){
		//fill your code here

	Scanner sc = new Scanner(System.in);

	String input;
	int choice;
	System.out.println("Choose Account Type\n1.Savings Account\n2.Current Account");
	choice = sc.nextInt();

	switch(choice) {
		case 1: {
			System.out.println("Enter Account details in comma separated(Account Name,Account Number,Bank Name,Organisation Name)");
			sc.nextLine();
			input = sc.nextLine();
			String[] fields = input.split(",");
			
			SavingsAccount account = new SavingsAccount(fields[0], fields[1], fields[2], fields[3]);
			account.display();
			break;
		}
		case 2: {
			System.out.println("Enter Account details in comma separated(Account Name,Account Number,Bank Name,TIN Number)");
			sc.nextLine();
			input = sc.nextLine();
			String[] fields = input.split(",");

			CurrentAccount account = new CurrentAccount(fields[0], fields[1], fields[2], fields[3]);
			account.display();

			break;
		}
	}

	}
}




3)

=> FundTransfer.java

public abstract class FundTransfer {
	//write your code here
	private String accoutNumber;
	private double balance;


	public FundTransfer(String accoutNumber, double balance) {
		this.accoutNumber = accoutNumber;
		this.balance = balance;
	}

	public boolean validate(double transfer) {
		return accoutNumber.length() == 10 && transfer >= 0 && transfer < balance;
	}

	public double getBalance() {
		return this.balance;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

	public abstract boolean transfer(double transfer);
}



=> NEFTTransfer.java

public class NEFTTransfer extends FundTransfer {
	//write your code here

	public NEFTTransfer(String accNo, double balance) {
		super(accNo, balance);
	}

	public boolean transfer(double transfer) {
		double sub = (transfer + 0.05*transfer);
		double balance = getBalance();

		if(sub < balance) {
			balance -= sub;

			setBalance(balance);
			return true;
		}
		return false;
	}

	
}



=> RTGSTransfer.java

public class RTGSTransfer extends FundTransfer{
	//write your code here	

	public RTGSTransfer(String accNo, double balance) {
		super(accNo, balance);
	}

	public boolean transfer(double transfer) {

		double balance = getBalance();

		
		if(transfer > 10000 && transfer < balance) {
			balance -= transfer;

			setBalance(balance);
			return true;
		}
		return false;
	}
}


=> IMPSTransfer.java

public class IMPSTransfer extends FundTransfer{
	//write your code here	


	public IMPSTransfer(String accNo, double balance) {
		super(accNo, balance);
	}

	public boolean transfer(double transfer) {

		double balance = getBalance();


		double sub = (transfer + 0.02*transfer);

		if(sub < balance) {
			balance -= sub;

			setBalance(balance);
			return true;
		}
		return false;
	}
}


=> Main.java

import java.util.*;

public class Main {
	public static void main(String args[]) throws Exception {
		//write your code here
		Scanner sc = new Scanner(System.in);

		String accNo;
		double balance, tsf;
		int choice;

		System.out.println("Enter your account number:");
		accNo = sc.nextLine();

		System.out.println("Enter the balance of the account:");
		balance = sc.nextDouble();

		System.out.println("Enter the type of transfer to be made:\n1.NEFT\n2.IMPS\n3.RTGS");
		choice = sc.nextInt();

		switch(choice) {
			case 1: {
					System.out.println("Enter the amount to be transferred:");
					tsf = sc.nextDouble();

					NEFTTransfer neftTransfer = new NEFTTransfer(accNo, balance);
					if(!neftTransfer.validate(tsf)) {
						System.out.println("Account number or transfer amount seems to be wrong");
					}
					else if(!neftTransfer.transfer(tsf)) {
						System.out.println("Transfer could not be made");
					}
					else {
						System.out.println("Transfer occurred successfully");
						System.out.println("Remaining balance is " + neftTransfer.getBalance());
					}

					break;
			}
			case 2: {
					System.out.println("Enter the amount to be transferred:");
					tsf = sc.nextDouble();


					IMPSTransfer impsTransfer = new IMPSTransfer(accNo, balance);
					if(!impsTransfer.validate(tsf)) {
						System.out.println("Account number or transfer amount seems to be wrong");
					}
					else if(!impsTransfer.transfer(tsf)) {
						System.out.println("Transfer could not be made");
					}
					else {
						System.out.println("Transfer occurred successfully");
						System.out.println("Remaining balance is " + impsTransfer.getBalance());

					}

					break;
			}
			case 3: {
					System.out.println("Enter the amount to be transferred:");
					tsf = sc.nextDouble();

					RTGSTransfer rtgsTransfer = new RTGSTransfer(accNo, balance);

					if(!rtgsTransfer.validate(tsf)) {
						System.out.println("Account number or transfer amount seems to be wrong");
					}
					else if(!rtgsTransfer.transfer(tsf)) {
						System.out.println("Transfer could not be made");
					}
					else {
						System.out.println("Transfer occurred successfully");
						System.out.println("Remaining balance is " + rtgsTransfer.getBalance());

					}

					break;
			}
		}
	}
}









iAssess

1)

=> Event.java

public class Event {
	//write your code here
	protected String name, detail, type, ownerName;
	protected double costPerDay;


	public Event(String name, String detail, String type, String ownerName, double costPerDay) {
		this.name = name;
		this.detail = detail;
		this.type = type;
		this.ownerName = ownerName;
		this.costPerDay = costPerDay;
	}

	public double getCostPerDay() {
		return this.costPerDay;
	}

	
}



=> Exhibition.java

public class Exhibition extends Event {
	//write	your code here
	private int noOfStall;

	public Exhibition(String name, String detail, String type, String ownerName, double costPerDay, int noOfStall) {
		super(name, detail, type, ownerName,costPerDay);
		this.noOfStall = noOfStall;
	}

	
}

=> StageEvent.java

public class StageEvent extends Event {
	//write your code here
	private int noOfSeats;

	public StageEvent(String name, String detail, String type, String ownerName, double costPerDay, int noOfSeats) {
		super(name, detail, type, ownerName,costPerDay);
		this.noOfSeats = noOfSeats;
	}
}


=> Main.java

import java.util.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.time.format.DateTimeFormatter;

public class Main {
	public static void main(String args[]) throws Exception{
		//write your code here

		Scanner sc = new Scanner(System.in);

		int choice;
		String input, startDate, endDate;
		
		System.out.println("Enter your choice:\n1.Exhibition event\n2.Stage event");
		choice = sc.nextInt();



		switch(choice) {
			case 1: {
				
				System.out.println("Enter the details of exhibition:");
				sc.nextLine();
				input = sc.nextLine();
				String[] fields = input.split(",");
				Exhibition event = new Exhibition(fields[0], fields[1], fields[2], fields[3], Double.parseDouble(fields[4]), Integer.parseInt(fields[5]));

				System.out.println("Enter the starting date of the event:");
				startDate = sc.nextLine();

				System.out.println("Enter the ending date of the event:");
				endDate = sc.nextLine();


				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    			LocalDate date1 = LocalDate.parse(startDate, formatter);
				LocalDate date2 = LocalDate.parse(endDate, formatter);

				long daysBetween = ChronoUnit.DAYS.between(date1, date2);

				double gst = event.getCostPerDay() * 0.05 * daysBetween;

				System.out.println("The GST to be paid is Rs." + gst);
				


				break;
			}
			case 2: {

				System.out.println("Enter the details of stage event:");
				sc.nextLine();
				input = sc.nextLine();
				String[] fields = input.split(",");
				StageEvent event = new StageEvent(fields[0], fields[1], fields[2], fields[3],  Double.parseDouble(fields[4]), Integer.parseInt(fields[5]));

				System.out.println("Enter the starting date of the event:");
				startDate = sc.nextLine();

				System.out.println("Enter the ending date of the event:");
				endDate = sc.nextLine();

				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    			LocalDate date1 = LocalDate.parse(startDate, formatter);
				LocalDate date2 = LocalDate.parse(endDate, formatter);

				long daysBetween = ChronoUnit.DAYS.between(date1, date2);

				double gst = event.getCostPerDay() * 0.15 * daysBetween;

				System.out.println("The GST to be paid is Rs." + gst);


				break;
			}
		}
	}
}





2)

=> Stall.java

public interface Stall {
 	//fill your code here

	 void display();
	 
}


=> GoldStall.java

public class GoldStall implements Stall{
	//fill your code here

	private String stallName, ownerName;
	private Integer cost, tvSet;

	public GoldStall(String stallName, Integer cost, String ownerName, Integer tvSet) {
		this.stallName = stallName;
		this.cost = cost;
		this.ownerName = ownerName;
		this.tvSet = tvSet;
	}

	public String getStallName() {
		return this.stallName;
	}

	public String getOwnerName() {
		return this.ownerName;
	}

	public Integer getCost() {
		return this.cost;
	}

	public Integer getTvSet() {
		return this.tvSet;
	}

	@Override
	public 	void display() {
		System.out.println("Stall Name:" + getStallName());
		System.out.println("Cost:" + getCost() + ".Rs");
		System.out.println("Owner Name:" + getOwnerName());
		System.out.println("Number of TV sets:" + getTvSet());
	}

}



=> PremiumStall.java

public class PremiumStall implements Stall{
	//fill your code here

	private String stallName, ownerName;
	private Integer cost, projector;

	public PremiumStall(String stallName, Integer cost, String ownerName, Integer projector) {
		this.stallName = stallName;
		this.cost = cost;
		this.ownerName = ownerName;
		this.projector = projector;
	}

	public String getStallName() {
		return this.stallName;
	}

	public String getOwnerName() {
		return this.ownerName;
	}

	public Integer getCost() {
		return this.cost;
	}

	public Integer getProjector() {
		return this.projector;
	}

	@Override
	public void display() {
		System.out.println("Stall Name:" + getStallName());
		System.out.println("Cost:" + getCost() + ".Rs");
		System.out.println("Owner Name:" + getOwnerName());
		System.out.println("Number of Projectors:" + getProjector());
	}
}



=> ExecutiveStall.java

public class ExecutiveStall implements Stall{
	//fill your code here

	private String stallName, ownerName;
	private Integer cost, screen;

	public ExecutiveStall(String stallName, Integer cost, String ownerName, Integer screen) {
		this.stallName = stallName;
		this.cost = cost;
		this.ownerName = ownerName;
		this.screen = screen;
	}

	public String getStallName() {
		return this.stallName;
	}

	public String getOwnerName() {
		return this.ownerName;
	}

	public Integer getCost() {
		return this.cost;
	}

	public Integer getScreen() {
		return this.screen;
	}

	@Override
	public 	void display() {
		System.out.println("Stall Name:" + getStallName());
		System.out.println("Cost:" + getCost() + ".Rs");
		System.out.println("Owner Name:" + getOwnerName());
		System.out.println("Number of Screens:" + getScreen());
	}
}



=> Main.java

import java.util.*;

public class Main {
    public static void main(String[] args){
		// fill your code here

		Scanner sc = new Scanner(System.in);

		int choice;
		String input;
		
		System.out.println("Choose Stall Type\n1)Gold Stall\n2)Premium Stall\n3)Executive Stall");
		choice = sc.nextInt();

		switch(choice) {
			case 1: {
				
				System.out.println("Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of TV sets)");
				sc.nextLine();
				input = sc.nextLine();
				String[] fields = input.split(",");

				GoldStall stall = new GoldStall(fields[0], Integer.parseInt(fields[1]), fields[2], Integer.parseInt(fields[3]));
				
				stall.display();

				break;
			}
			case 2: {
				
				System.out.println("Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Projectors)");
				sc.nextLine();
				input = sc.nextLine();
				String[] fields = input.split(",");

				PremiumStall stall = new PremiumStall(fields[0], Integer.parseInt(fields[1]), fields[2], Integer.parseInt(fields[3]));
				
				stall.display();

				break;
			}
			case 3: {
				
				System.out.println("Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Screens)");
				sc.nextLine();
				input = sc.nextLine();
				String[] fields = input.split(",");

				ExecutiveStall stall = new ExecutiveStall(fields[0], Integer.parseInt(fields[1]), fields[2], Integer.parseInt(fields[3]));
				
				stall.display();

				break;
			}
			default:
				System.out.println("Invalid Stall Type");
		}
	}
}


