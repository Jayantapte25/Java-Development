iDesign

1)

==> Main.java

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the text from the document");
        String documentText = scanner.nextLine();

        System.out.println("Enter the string to be found in the data");
        String searchText = scanner.nextLine().trim();

        if (documentText.contains(searchText)) {
            System.out.println("String is found in the document");
        } else {
            System.out.println("String is not found in the document");
        }
    }
}




2) 

==> Item.java

public class Item {
	//fill the code here

	private String name;
    private String type;
    private Integer cost;
    private Integer availableQuantity;

    public Item() {}

    public Item(String name, String type, Integer cost, Integer availableQuantity) {
        this.name = name;
        this.type = type;
        this.cost = cost;
        this.availableQuantity = availableQuantity;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getCost() {
        return cost;
    }

    public void setCost(Integer cost) {
        this.cost = cost;
    }

    public Integer getAvailableQuantity() {
        return availableQuantity;
    }

    public void setAvailableQuantity(Integer availableQuantity) {
        this.availableQuantity = availableQuantity;
    }
}




==> Main.java

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//fill your code here
		Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of items:");
        int n = scanner.nextInt();

        scanner.nextLine(); // Consume newline character left-over

        StringBuilder itemsBuilder = new StringBuilder();
        itemsBuilder.append("Items:\n");

		System.out.println("Enter the item details in the format(Item Name$Item Type$Item Cost$Item Availability)");
        for (int i = 0; i < n; i++) {
            String[] itemDetails = scanner.nextLine().split("\\$");

            Item item = new Item(itemDetails[0], itemDetails[1], Integer.parseInt(itemDetails[2]), Integer.parseInt(itemDetails[3]));

            String availability = (item.getAvailableQuantity() == 0) ? "Not Available" : "Available";
            itemsBuilder.append(item.getName() + "," + item.getType() + "," + item.getCost() + "," + availability);
			
			if(i < n-1) {
				itemsBuilder.append("\n");
			}
        }

        System.out.println(itemsBuilder.toString());
    }
}



3)

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the date to be formatted:(MM-dd-yyyy)\n");
        String dateString = scanner.nextLine();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        LocalDate date = LocalDate.parse(dateString, formatter);

        String format1 = date.format(DateTimeFormatter.ofPattern("EEE, MMM d, yy"));
        String format2 = date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
        String format3 = date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));

        System.out.println("Date Format with EEE, MMM d, yy : " + format1);
        System.out.println("Date Format with dd.MM.yyyy : " + format2);
        System.out.println("Date Format with dd dd/MM/yyyy : " + format3);
    }
}




iAssess 

1)

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the code");
        String code = scanner.nextLine();

        StringBuilder formattedCode = new StringBuilder(code);

        if (code.substring(0, 2).equals("DH")) {
            formattedCode.replace(0, 2,"DEL");
        } else if (code.substring(0, 2).equals("MB")) {
            formattedCode.replace(0, 2,"MUB");
        } else if (code.substring(0, 2).equals("KL")) {
            formattedCode.replace(0, 2,"KOL");
        }

        int referenceNumber = Integer.parseInt(code.substring(2));

        formattedCode.replace(3, formattedCode.length()+1, String.format("%05d", referenceNumber));

        System.out.println("Formatted code");
        System.out.println(formattedCode.toString());
    }
}



2) 60%

==> Event.java

import java.util.*;
import java.text.*;

class Event {
	private String eventName;
	private Date startDate;
	private Date endDate;

	// Default constructor
	public Event() {}

	// Parameterized constructor
	public Event(String eventName, Date startDate, Date endDate) {
		this.eventName = eventName;
		this.startDate = startDate;
		this.endDate = endDate;
	}

	// Getters and setters
	public String getEventName() {
		return eventName;
	}

	public void setEventName(String eventName) {
		this.eventName = eventName;
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	// Method to check if the event is for only one day
	public boolean isOneDayEvent() {
		return startDate.compareTo(endDate) == 0;
	}
}


==> Main.java

import java.util.*;
import java.text.*;

public class Main {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

		// Read the number of events
		System.out.println("Enter the number of Events");
		int n = scanner.nextInt();
		scanner.nextLine();

		List<Event> events = new ArrayList<>();

		// Read the details of each event and create objects of the Event class
		System.out.println("Enter event details in CSV(Event Name,Start Date,End Date) Date:dd/MM/yyyy");
		for (int i = 0; i < n; i++) {
			String input = scanner.nextLine();
			String[] tokens = input.split(",");
			String eventName = tokens[0];
			Date startDate = null;
			Date endDate = null;

			try {
				startDate = dateFormat.parse(tokens[1]);
				endDate = dateFormat.parse(tokens[2]);
			} catch (ParseException e) {
				e.printStackTrace();
			}

			events.add(new Event(eventName, startDate, endDate));
		}

		// Check for 1-day events and display their names
		List<String> oneDayEvents = new ArrayList<>();
		for (Event event : events) {
			if (event.isOneDayEvent()) {
				oneDayEvents.add(event.getEventName());
			}
		}

		// Display the names of all 1-day events
		System.out.println("1-day Events:");
		if (oneDayEvents.size() == 0) {
			System.out.println("No Events");
		} else {
			for (String eventName : oneDayEvents) {
				System.out.println(eventName);
			}
		}

		scanner.close();
	}
}





